# -*- coding: utf-8 -*-
"""Welcome To Colab

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/notebooks/intro.ipynb
"""

import csv
from datetime import datetime

def impl(P, Q):
    return (not P) or Q

def tf (b:bool) -> str:
    return "T" if b else "F"

def log_result(student_name, rule_name, result):
  with open("logic_results.csv", "a", newline="") as file:
    writer = csv.writer(file)
    writer.writerow([datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                     student_name, rule_name, result])

#Rule 1 attendance
def attendance_rule(student_name):
  print("\n--- Attendance Rule Checker ---")
  late = input("Is the student late? (T/F): ").strip().upper() == "T"
  excuse = input("Did the student bring an excuse letter? (T/F): ").strip().upper() == "T"

  result = impl(late, excuse)
  outcome = "Satisfied" if result else "Violated"

  print(f"P = {tf(late)} (late), Q = {tf(excuse)} (excuse Letter)")
  print("Result: ", outcome)

  log_result(student_name, "Attendance Rule", outcome)

#rule 2 grading
def grading_rule(student_name):
  print("\n--- Grading Rule Checker ---")
  try:
    grade = float(input("Enter student grade: "))
  except ValueError:
    print("invalid grade input")
    return

  P = grade >= 75
  Q = grade >=75 # pass if >=75
  result = impl(P, Q)
  outcome = "Satisfied" if result else "Violated"

  print(f"P = {tf(P)} (grade >= 75), Q = {tf(Q)} (student passes)")
  print("Result: ", outcome)

  log_result(student_name, "Grading Rule", outcome)

#Rule 3 login system
def login_rule(student_name):
  print("\n--- Login Rule Checker ---")
  correct_password = "adomin123"
  attempt = input("Enter password: ")

  P = (attempt == correct_password) # password correct?
  Q = (attempt == correct_password) # access granted if correct
  result = impl(P, Q)
  outcome = "access granted" if result else "access denied"

  print(f"P = {tf(P)} (Password Correct), Q = {tf(Q)} (access granted)")
  print("Result: ", outcome)

  log_result(student_name, "Login Rule", outcome)

# Rule 4 Bonus Points
def bonus_rule(student_name):
  print("\n--- Bonus Points Checker ---")
  regular = input("Does the student have regular attendance? (T/F): ").strip().upper() == "T"
  bonus = regular #eligible if regular
  result = impl(regular, bonus)
  outcome = "Satisfied" if result else "Violated"

  print(f"P = {tf(regular)} (regular attendance), Q = {tf(bonus)} (eligible for bonus points)")
  print("Result: ", outcome)

  log_result(student_name, "Bonus Points Rule", outcome)

#rule 5 Gender Checking Rule
def gender_rule(student_name):
  print("\n--- Gender Checking Rule Checker ---")
  gender = input("Enter student gender (M/F): ").strip().upper()
  select = gender
  result = impl(gender, select)
  outcome = "Satisfied" if result else "Violated"

  print(f"P = {tf(gender)} (student gender), Q = {tf(select)} (selected gender)")
  print("Result: ", outcome)

  log_result(student_name, "Gender Checking Rule", outcome)

#Main Menu
def main():
  print("===University Logic Rules System===")
  student_name = input("Enter student name: ").strip()

  while True:
    print("\n-===========================")
    print("Main Menu")
    print("\n-===========================")
    print("1) Attendance rule checker")
    print("2) Grading Rule Checker")
    print("3) Login System Rule Checker")
    print("4) Bonus Points Checker")
    print("5) Gender selection checker")
    print("6) Exit")

    choice = input("Choose an option (1-5): ").strip()

    if choice == "1":
      attendance_rule(student_name)
    elif choice == "2":
      grading_rule(student_name)
    elif choice == "3":
      login_rule(student_name)
    elif choice == "4":
      bonus_rule(student_name)
    elif choice == "5":
      gender_rule(student_name)
    elif choice == "6":

      print("Exiting the program. Results saved to logic_results.csv")
      break
    else:
      print("Invalid choice. Try again.")

if __name__ == "__main__":
    with open("logic_results.csv", "a", newline="") as file:
      writer = csv.writer(file)
      writer.writerow(["Timestamp", "Student Name", "Rule", "Result"])
    main()